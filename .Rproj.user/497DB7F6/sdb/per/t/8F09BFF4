{
    "collab_server" : "",
    "contents" : "# Author: Brian Eads\n# Date Modified:2016/11/08\n## DEV ##\n\nlibrary(shiny)\n\n#library(shinyjs)\n# library(chron)\nlibrary(tidyverse) ## loads ggplot2, dplyr, tidry, readr, purrr, tibble, hms, stringr, lubridate, forcats, DBI, httr, jsonlite, readxl, rvest, xml2, modelr, broom\nlibrary(data.table)\nlibrary(DT)\n# library(git2r)\n# library(knitr)\n# library(reshape2)\n# library(shinysky)\nlibrary(rhandsontable)\nlibrary(plotly)\n# library(shinyjs)\n#library(dygraphs)\nlibrary(RPostgreSQL)\n\n####################################### db con will go in global.R ##########################\n\n#pw <- { \"Earthmen<Ability78\"} # for chemdicambastability_rw \npw <- { \"Anchovies<Memory78\" } # for chemdicambastability\n#pw <- { \"ShinyTestbed\" } # for local/desktop pgs\n\n## loads the postgreSQL driver\ndrv <- dbDriver(\"PostgreSQL\")\n\n## creates a connex to db\n## \"con\" will be used later in each connex to db\n\n# USE this connection when running RStudio locally\n# con <- dbConnect(drv, dbname = \"postgres\",\n#                  host = \"localhost\",\n#                  port = \"5432\",   \n#                  user = \"openpg\",\n#                  password = pw)\n# rm(pw)\n\n## USE this connection when running RStudio from J-building (rstudio.monsanto.com)\ncon <- dbConnect(drv, dbname = \"chembox\",\n                 host = \"stluhdpedev01\",\n                 port = 5465,\n                 user = \"chemdicambastability\",\n                 password = pw)\nrm(pw)\n\n## USE this connection when connecting to RStudio from AWS (rstudio.science-at-scale.io)\n# con <- dbConnect(drv,\n#                  dbname=\"chembox\",\n#                  host=\"genome-analytics-np.c4hzw6lhqdnu.us-east-1.rds.amazonaws.com\",\n#                  port = 5432,\n#                  user=\"chemdicambastability\",\n#                  password=pw)\n# rm(pw)\n\n# ## check for the table\n# \ndbExistsTable(con, \"sample_check_in\")\n\n######### read and write to db; will go in server.R\nkillDbConnections <- function ()\n  \n{\n  all_cons <- dbListConnections(PostgreSQL())\n  \n  print(all_cons)\n  \n  for(con in all_cons)\n    +  dbDisconnect(con)\n  \n  print(paste(length(all_cons), \" connections killed.\"))\n  \n}\n\n#killDbConnections()\n\n# samp_chx <- read.csv(\"sample_check_in.csv\", header = TRUE, stringsAsFactors = FALSE)\n# as.data.frame(samp_chx, row.names = NULL)\n\n# writes samp_chx to the postgreSQL database \"postgres\", table \"sample_check_in\" \n#dbWriteTable(con, \"sample_check_in\", value = samp_chx, row.names = FALSE, overwrite = TRUE)\n\n## query the data from postgreSQL\nsamp_chx_postgres <- dbGetQuery(con, \"SELECT * from sample_check_in\")\n\n\n#########################################  ui.R  ##############################################\n\nui <-\n  shinyUI(\n    navbarPage(\n      title = \"Muscatine Stability Studies\", style = \"color: #0000FF;\", position = \"static-top\", collapsible = TRUE, fluid = TRUE,\n      tabPanel('Sample Check In',\n               wellPanel(fluidRow(\n                 column(\n                   6,\n                   textInput('ExptNumber', \"Plant Experiment Number\"),\n                   br(),\n                   selectInput('ProdName', \"Select Product Name\", choices = c(\"Degree Xtra\", \"Warrant\", \"Warrant Ultra\", \"Warrant Co-Pro\", \"Harness\", \"Harness Xtra 5.6L\", \"Harness EC US\"), selected = NULL), #, \"MON62102\", \"MON63479\"\n                   br(),\n                   radioButtons(\"tempVar\", \"Experimental Variable Code (please provide key in following box):\", choices = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"), inline = TRUE),\n                   br(),\n                   textInput(\"SampDesc\", \"Brief description of Variable Code:\"),\n                   br(),\n                   h3(\"Assay Type\"),\n                   checkboxInput(\"assayAA\", label = \"AA\"),\n                   conditionalPanel(\n                     condition = \"input.assayAA == true\",\n                     checkboxGroupInput(\"weeks\", label = h4(\"Duration in Weeks\"),\n                                        choices = list(\"4wk\", \"6wk\", \"8wk\"))\n                   ),\n                   checkboxInput(\"assayRTA\", label = \"RTA\"),\n                   conditionalPanel(\n                     condition = \"input.assayRTA == true\",\n                     checkboxGroupInput(\"months\", label = h4(\"Duration in Months\"),\n                                        choices = list(\"6mo\", \"9mo\", \"12m\", \"18m\", \"24m\"))\n                   ),\n                   br(),\n                   uiOutput('SampleID')\n                 ),\n                 column(\n                   6,\n                   selectInput('batch', \"Batch Number\", choices = 1:10),\n                   br(),\n                   dateInput('manufDate', \"Date of Manufacture\"),\n                   br(),\n                   numericInput('JugsRecvd', \"How many jugs were received?\", value = 1, min = 1, max = 20, step = 1),\n                   br(),\n                   numericInput('JugsTest', \"How many jugs will be tested?\", value = 1, min = 1, max = 20, step = 1),\n                   br(),\n                   dateInput(\"receivedDate\", \"Date sample was received:\", weekstart = 1),\n                   br(),\n                   dateInput(\"t0assay\", \"Time Zero Assay Date:\", weekstart = 1), ## nice lubridate trick:\n                   ##                 to add 6 or 12 months to lubridate::today(), use lubridate::today() + months(6)\n                   ##                 to make sure a date 6 or 18 months in future is not a Sat/Sun:\n                   ##                 lubridate::wday(lubridate::today()) != 1 | 7 (1 = Sun, 7 = Sat)\n                   ##                 NOTE that Shiny thinks Sunday is 0 and Saturday is 6!\n                   ##                 lubridate also keeps track of leap-years, eg. lubridate::leap_year(2016) == TRUE\n                   br(),\n                   textInput('checker', \"Checked by\"),\n                   br(),\n                   textInput('receiver', \"Received by\"),\n                   br(),\n                   selectInput('storeLocate', \"Location in storage room\", choices = c(\"A1\", \"A2\", \"A3\", \"B1\", \"B2\", \"B3\", \"C1\", \"C2\", \"C3\"))\n                 ),\n                 column(6, offset = 5,\n                        actionButton(\"sampleCheckIn\", \"Submit\"))\n               ))),\n      tabPanel('Testing Schedule',\n               h1(id = \"title\", \"Stability Testing Schedule\"),\n               sidebarLayout(\n                 sidebarPanel(\n                   textInput('sampleID', \"Enter Sample ID\"),\n                   br(),\n                   dateRangeInput('defaultCalendarRange', \"Enter range of Dates:\", start = Sys.Date(), end = Sys.Date() + months(1))\n                 ),\n                 mainPanel()\n               ),     \n               \n               uiOutput(\"calendar\")\n      ),\n      tabPanel('Recording Test Results',\n               wellPanel(fluidRow(\n                 column(6,\n                        textInput('sampleID', \"Enter Sample ID\"),\n                        br(),\n                        #                radioButtons('assayDuration', \"Assay Type and Timepoint:\", choices = c(\"time 0\", \"RTA 6 mo\", \"RTA 9 mo\", \"RTA 12 mo\", \"RTA 18 mo\", \"RTA 24 mo\", \"AA 4 wk\", \"AA 6 wk\", \"AA 8 wk\")),\n                        dateInput(\"assay_date\", \"Date of Assay:\", weekstart = 1), \n                        br(),\n                        h3(\"Physical Characteristics\", style = \"color: #0000FF;\"),\n                        br(),\n                        numericInput('pHrange', 'pH', value = 7, min = 0, max = 14, step = 0.01),\n                        checkboxInput('pHtest', \"Out of Specification?\"),\n                        br(),\n                        numericInput('viscosity', 'Viscosity', value =250, min = 0, max = 1000),\n                        checkboxInput('viscoTest', \"Out of Specification?\"),\n                        br(),\n                        numericInput('specificGravity', 'Specific Gravity', value = 1.17, min = 0, max = 2, step = 0.001),\n                        checkboxInput('gravTest', \"Out of Specification?\"),\n                        br(),\n                        textInput('meanPartSize', 'Particle size, mean (micrometers)'),\n                        checkboxInput('meanTest', \"Out of Specification?\"),\n                        br(),\n                        textInput('medPartSize', 'Particle size, median (micrometers)'),\n                        checkboxInput('medTest', \"Out of Specification?\"),\n                        h3(\"Appearance\", style = \"color: #0000FF;\"),\n                        br(),\n                        numericInput('topClearing', 'Top Clearing, mm', min = 0, max = 100, value = 1),\n                        br(),\n                        numericInput('height', 'Height, mm', min = 0, max = 500, value = 1),\n                        br(),\n                        numericInput('ratio', 'Top/Height, %', min = 0, max = 100, value = 1),\n                        br(),\n                        numericInput('jugBottom', 'Jug Bottom, mm', min = 0, max = 20, value = 1),\n                        br(),\n                        textInput('visDescrip', 'Visual Description'),\n                        br(),\n                        br(),\n                        column(4, offset = 2,\n                               actionButton(\"assayResult\", \"Upload Assay Result\"))\n                 ),\n                 column(\n                   6,\n                   br(),\n                   br(),\n                   br(),\n                   h3(\"Assay\", style = \"color: #0000FF;\"),\n                   br(),\n                   numericInput('Acetochlor', 'Acetochlor wt%', min = 1, max = 100, value = 30),\n                   #checkboxInput('AcetochlorTest', \"Out of Specification?\", value = FALSE),\n                   ### Don't forget, need to add ability to test whether it's Out of Spec, and then de-click\n                   ### to accept a value that is nevertheless technically out of spec, but accepted by user.\n                   #\n                   ##  widget sends the server TRUE if box is checked, FALSE otherwise\n                   ##  can access the value of the widget with input$checkbox, e.g.\n                   ##  output$AcetochlorTest <- renderPrint({ input$AcetochlorTest }) #  this would go in server.R\n                   br(),\n                   numericInput('Atrazine', 'Atrazine wt%', min = 1, max = 100, value = 14),\n                   checkboxInput('AtrazineTest', \"Out of Specification?\"),\n                   br(),\n                   numericInput('Mon13900', 'MON13900 wt%', min = 0, max = 5, value = 0.4),\n                   checkboxInput('Mon13900Test', \"Out of Specification?\"),\n                   br(),\n                   numericInput('Fomesafen', 'Fomesafen wt%', min = 0, max = 50, value = 5),\n                   checkboxInput('FomesafenTest', \"Out of Specification?\"),\n                   br(),\n                   numericInput('AcetochlorREAc', 'REAc Acetochlor wt%', min = 0, max = 2, value = 0.4),\n                   checkboxInput('AcetochlorREAcTest', \"Out of Specification?\"),\n                   h3(\"Bloom and Redispersion\", style = \"color: #0000FF;\"),\n                   br(),\n                   h4(\"114 ppm\", style = \"color: #FF0000;\"),\n                   textInput('114ppm1hrNum', '1 h, mm'),\n                   checkboxInput('114ppm1hrTest', \"Out of Specification?\"),\n                   textInput('114ppm1hrNum', '24 h, mm'),\n                   checkboxInput('114ppm24hrTest', \"Out of Specification?\"),\n                   br(),\n                   h4(\"342 ppm\", style = \"color: #FF0000;\"),\n                   textInput('342ppm1hrNum', '1 hr, mm'),\n                   checkboxInput('342ppm1hrTest', \"Out of Specification?\"),\n                   textInput('342ppm1hrNum', '24 hr, mm'),\n                   checkboxInput('342ppm24hrTest', \"Out of Specification?\"),\n                   br(),\n                   h4(\"1000 ppm\", style = \"color: #FF0000;\"),\n                   textInput('1000ppm1hrNum', '1 hr, mm'),\n                   checkboxInput('1000ppm1hrTest', \"Out of Specification?\"),\n                   textInput('1000ppm1hrNum', '24 h, mm'),\n                   checkboxInput('1000ppm1hrTest', \"Out of Specification?\")\n                 )\n               )\n               )\n      ),\n      tabPanel('Assay Reporting',\n               h1(id = \"title\", \"Assay Reporting\"),\n               sidebarLayout(\n                 sidebarPanel(\n                   selectInput('sampleID', \"Enter Sample IDs\", choices = \"\", multiple = TRUE, selectize = TRUE),\n                   br(),\n                   dateRangeInput('defaultCalendarRange', \"Enter range of Dates:\", start = Sys.Date(), end = Sys.Date() + months(1))\n                 ),\n                 mainPanel(\n                 \n               \n               dataTableOutput(\"my_output_data\")\n                ) \n      )\n  )\n    )\n  )\n\nserver <- function(input,output,session){\n  ## shinyServer(function(input,output,session)({})\n  \n\n###################### server code for Sample Check-in ####################  \n  \n  ### convert ProdName to a shortened code:\n  ProdCode <- reactive ({\n    switch(input$ProdName,\n           \"Degree Xtra\" = 'DX',\n           \"Warrant\" = 'W',\n           \"Warrant Ultra\" = 'WU',\n           \"Warrant Co-Pro\" = 'WCP',\n           \"Harness\" = 'H',\n           \"Harness Xtra 5.6L\" = 'HX5.6L',\n           \"Harness EC US\" = 'HEC')\n  })\n  \n  \n  \n  ## make vector of timepoints\n  timePoints <- reactive ({\n    as.character(c(input$weeks, input$months))\n  })\t\t\t\t\t \n  \n  ## paste inputs together in a string\n  sampleStringer <- function() {\n    as.list(paste0(input$ExptNumber, ProdCode(), \"_\", input$tempVar, \"_\", timePoints(), sep = \", \"))\n  }\n  \n  ## add timepoints selected to the string\n  Samples <- reactive ({\n    lapply(timePoints(), sampleStringer)\n  })\n  \n  \n  output$SampleID <- renderUI({ sampleStringer() })  ## this is a useful check\n  \n  ## want to isolate sampleStringer objects (those are the sample IDs) to avoid dependency on \n  ## inputs from sample submission when the df is written.\n  ## first make a function to create the df\n  ## then isolate the input$sampleCheckIn\n  ## then lapply the function to the samples and write the df\n  \n  \n  saveCheckIn_df <- reactive({\n    validate(need(input$ExptNumber), message = \"Please input Plant Experiment Number\")\n    validate(need(input$checker), message = \"Please input identity of person who checked jugs\")\n    # take a dependency on submit button\n    input$sampleCheckIn\n    \n    data.frame(\n      plant_exp_code = input$ExptNumber,\n      product_name = input$ProdName,\n      temp_variation_code = input$tempVar,\n      brief_description = input$SampDesc,\n      storage_room_location = input$storeLocate,\n      batch = input$batch,\n      manufacturing_date = input$manufDate,\n      date_samples_received = input$receivedDate,\n      quantity_jugs_received = input$JugsRecvd,\n      aa_test = input$assayAA,\n      rta_test = input$assayRTA,\n      sample_received_by = input$receiver,\n      sample_checked_by = input$checker,\n      quantity_jugs_tested = input$JugsTest\n    )\n  })\n  \n  ## does the function itself need to be reactive?\n  \n  ## avoid dependency on inputs\n  \n  # sampleIDs <- as.list(isolate(sampleStringer()))\n  # sampleIDs <- as.list(isolate(input$SampleID))\n  ## error: not finding SampleIDs\n  #   sampleIDs <- isolate({\n  #     as.list(input$SampleID)\n  #   })\n  #   \n  \n  ## create the df with lapply \n  #  saveCheckIn_df <- data.frame(lapply(SampleIDs, FUN=saveCheckIn_df))\n  \n  ## write the df to db  \n  # dbWriteTable(con, sample_check_in, saveCheckIn_df,overwrite = TRUE)\n  \n  ################################ server code for Testing Schedule ############################\n  \n  ## test code to produce an example \"calendar\" plot:\n  \n  testDates <- c(lubridate::today(), lubridate::today()+1, lubridate::today()+2, lubridate::today()+3)\n  schedule <- c( 28, 42, 56, months(6), months(9), 365, months(18), 720 ) ## months(x) works!\n  newDates <- outer(as.Date(testDates), schedule, `+`) ## this works!\n  \n  ## Create parameters for color- and shape-coding the points on the calendar\n  ## lapply these functions to create SampCols and SampShapes vectors to pass\n  \n  SampColfn <- function(sampleID){\n    switch(sampleID,\n           \"_DX\" = \"green\",\n           \"_W\"   = \"blue\",\n           \"_WU\"  = \"orange\",\n           \"_WCP\" = \"purple\",\n           \"_H\"   = \"brown\",\n           \"_HX5.6L\" = \"red\",\n           \"_HEC\"  = \"grey\")\n  }\n  \n  SampShapfn <- function(sampleID) {\n    switch(sampleID,\n           \"_4wk\"   = \"15\",\n           \"_6wk\"   = \"16\",\n           \"_8wk\"   = \"17\",\n           \"_6mo\"   = \"18\",\n           \"_9mo\"   = \"19\",\n           \"_12m\"   = \"3\",\n           \"_18m\"   = \"13\",\n           \"_24m\"   = \"+\")\n  }\n  \n  ### However, the plot_ly function does NOT work, even with example data...!!\n  ### Use dygraphs instead?\n  # A <- 1:16\n  # B <- letters[1:16]\n  # sampleID <- paste0(A,B, sep = \"\")\n  # samp2 <- paste0(sampleID, sampleID)\n  # sampleData <- data.frame(sampleID, newDates)\n  # \n  # dygraph(sampleData)\n  # periodicity(sampleData) -> sampPer\n  # \n  # #calendar <- plot_ly(x = ~sampleData$newDates, y = ~sampleData$sampleID, color = 'rgba(255, 182, 193, .9)',type=\"scatter\")\n  #                 \n  #   output$calender <- renderUI ({\n  #     calendar <- plot_ly(sampleData, x = ~sampleData$testDates, y = ~sampleData$sampleID, color = 'blue',type=\"scatter\")\n  \n  #  })\n  \n############## server code for Test Results #############################\n  \n## user wants an \"alert\" if the ranges supplied for test results are outside of specified ranges. \n\n  ##  Do the specified ranges depend on the particular product? If so, need to switch based on\n  ##  ID code and provide vectors of ranges to read for pH, viscosity, sp. gravity, etc etc.\n  ##  May work to replace current checkboxInput lines with a textInput box (named) & logical tests:\n  \n  #          ifelse(input$pHrange %in% 5.5:7.5 == FALSE, print(\"outside of range!\"), \"\"),\n  #          ifelse(input$viscosity %in% 100:300 == FALSE, print(\"outside of range!\"), \"\"),\n  #          ifelse(input$specificGravity %in% 1.15:1.29 == FALSE, print(\"outside of range!\"), \"\"),\n  #          ifelse(input$meanPartSize %in% 20:40 == FALSE, print(\"outside of range!\"), \"\"),\n  #          ifelse(input$meanPartSize %in% 25:35 == FALSE, print(\"outside of range!\"), \"\"),\n  #          ifelse(input$Acetochlor %in% 0.04:1.99 == FALSE, print(\"outside of range!\"),\"\"),\n  #          ifelse(input$Atrazine %in% 88:89.5 == FALSE, print(\"outside of range!\"),\"\"),\n  #          ifelse(input$Mon13900 %in% 0.4:0.99 == FALSE, print(\"outside of range!\"),\"\"),\n  #          ifelse(input$Fomesafen %in% 2.4:3.99 == FALSE, print(\"outside of range!\"),\"\"),\n  #          ifelse(input$AcetochlorREAc %in% 4.4:6.99 == FALSE, print(\"outside of range!\"),\"\"),\n  \n\n  \n############## server code for Assay Reporting ###########################\n  \n  \n  \n}\n\n\nshinyApp(ui = ui, server = server)\n",
    "created" : 1479782533888.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1305215447",
    "id" : "8F09BFF4",
    "lastKnownWriteTime" : 1479335906,
    "last_content_update" : 1479790768664,
    "path" : "~/Desktop/ChemDicambaStability-master/app.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}