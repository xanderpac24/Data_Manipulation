{
    "collab_server" : "",
    "contents" : "### chemDicambaStability global.R file\n\n###\n########## db con will go in global.R #################################\n# pw <- { \"new_user_password\"}\n# \n# ## loads the postgreSQL driver\n# \n# drv <- dbDriver(\"PostgreSQL\")\n# \n# ## creates a connex to db\n# ## \"con\" will be used later in each connex to db\n# \n# con <- dbConnect(drv, dbname = \"postgres\",\n#                  host = \"localhost\", port = 5432,\n#                  user = \"openpg\", password = pw)\n# rm(pw)\n# \n# ## check for the table\n# \n# dbExistsTable(con, \"sample_check_in\")\n\n#############################################################################################################\n\n######### read and write to db; will go in server.R #############################################\n\n# samp_chx <- read.csv(\"sample_check_in.csv\", header = TRUE, stringsAsFactors = FALSE)\n# as.data.frame(samp_chx, row.names = NULL)\n\n## writes samp_chx to the postgreSQL database \"postgres\", table \"sample_check_in\" \n# dbWriteTable(con, \"sample_check_in\", value = samp_chx, row.names = FALSE, overwrite = TRUE)\n# \n# ## query the data from postgreSQL\n# samp_chx_postgres <- dbGetQuery(con, \"SELECT * from sample_check_in\")\n\n# killDbConnections <- function () \n#   \n# {\n#   all_cons <- dbListConnections(PostgreSQL())\n#   \n#   print(all_cons)\n#   \n#   for(con in all_cons)\n#     +  dbDisconnect(con)\n#   \n#   print(paste(length(all_cons), \" connections killed.\"))\n#   \n# }\n\n## killDBConnections()\n\nrm(list = ls())\n\n##  Sys.setenv(TZ='CDT')  ## Don't want to set this if it changes twice per year...?\n\nsessionInfo()\n.libPaths()\n\noptions(shiny.maxRequestSize=30*1024^2)\n\nlibrary(sendmailR)\n\n## sendmail test:\n# sendmail(from=\"bdeads@monsanto.com\",to=\"bdeads@monsanto.com\",subject=\"test subject\",msg=\"\n# This is a test\n# multiple lines\n# \")\n\n\n##PostgreSQL\n## make sure ../db/'appName'.db.connection.txt exists; uncommented in Nengbings prod code\n\n# dbPropertiesFile<-ifelse(file.exists('/db/.chemdicambastability.db.connection.txt'), '/db/.chemdicambastability.db.connection.txt',\n#                          ifelse(file.exists('../db/.chemdicambastabiltiy.db.connection.txt'), '../db/.chemdicambastability.db.connection.txt',\n#                                 '../../../db/.chemdicambastability.db.connection.txt')\n# )\n## use ../db/.chemdicambastability.db.connection.dev.txt for PROD\n\n## the file should contain column header like 'dbDriver dbname username password host' and actual values\n## During deployment to AWS, simply copy the dbProperties file to /db/ or change as appropriate; uncommented\n# dbConnection <- fread(dbPropertiesFile)\n# dbConnection\n# drv<-dbDriver(dbConnection$dbDriver)\n# drv\n## con<-dbConnect(drv, user = dbConnection$username,password = dbConnection$password,dbname=dbConnection$dbname, host=dbConnection$host)\n# con<-dbConnect(drv, user = dbConnection$username,password = dbConnection$password,dbname=dbConnection$dbname, host=dbConnection$host, port=dbConnection$port)\n## on.exit(dbDisconnect(con), add=TRUE)\n\n## PostgreSQL: commented out in Nengbings prod code\n# dbConnection <- fread(\".db.PostgreSQL.connection.txt\")\n# dbConnection\n# drv<-dbDriver(dbConnection$dbDriver)\n# drv\n# con<-dbConnect(drv, user = dbConnection$username,password = dbConnection$password,dbname=dbConnection$dbname, host=dbConnection$host)\n\n######################################################################\n# basics \n\ncurrTime <- format(Sys.time(), \"%Y-%m-%d_%H-%M-%S\")\n\n# set directory to store data, stay away from using the work dir\n# \n# hostName<-system2(\"hostname\",stdout=T)\n# hostName\n# if (hostName == 'stlurstudprd01') {\n#   topDir = \"/import/analysis/divergence/SHINY/ChemSORT\"\n# } else if (hostName == 'stlushinyprd01') {\n#   topDir = \"/seqosystem/shiny-server/data/ChemSORT\"\n# } else {\n#   topDir = \"/import/analysis/divergence/SHINY/ChemSORT\"\n# }\n\n#topDir = \"/import/analysis/divergence/SHINY/dicamba\"  # for PROD\n# topDir = \"/import/analysis/divergence/SHINY/dicamba_d\" # for DEV\n# topDir = getwd()\n#dir.create(topDir, showWarnings = FALSE)\n\ndatabaseDir = paste(topDir,\"/\",\"DATABASE\",sep=\"\")\ndir.create(databaseDir, showWarnings = FALSE)\n\n# BACKUP dir\n# backUpDir = paste(topDir,\"/\",\"BACKUP\",sep=\"\")\n# dir.create(backUpDir, showWarnings = FALSE)\n# \n# logDir = paste(topDir,\"/\",\"LOG\",sep=\"\")\n# dir.create(logDir, showWarnings = FALSE)\n\n#logFile <- paste(getwd(), \"/\", format(Sys.time(), \"%Y-%m-%d_%H-%M-%S\"),round(runif(1, min=10000, max=99999)),'.csv',  sep='')\n# logFile <- paste(logDir, \"/\", currTime,'.log',  sep='')\n\n\n# end_basics \n######################################################################\n\n######################################################################\n# get db info, build data frames\n\n# may move to server.R and make it reactive to user and then user renderUI to send back to ui\n# query_DICAMBA_PROJECT <- paste0(\"select distinct project from DICAMBA_USER_PRIV where app_user='ADMIN'\")\n# \n\n\nquery_USER_PRIV <- paste0(\"select * from  stability_user_priv\")\nstabilityUserPriv_df<-dbGetQuery(con,query_USER_PRIV)\n\nseparatorForJoinId <- (stabilityUserPriv_df %>% dplyr::filter(app_user=='ADMIN' & key == 'SEPARATOR'))$value\n## separatorForJoinId\n\nreplicateMax <- as.numeric((dicambaUserPriv_df %>% dplyr::filter(app_user=='ADMIN' & key == 'REPLICATEMAX'))$value)\n# replicateMax\n\n\n# query_DICAMBA_PROJECT <- paste0(\"select distinct value project from DICAMBA_USER_PRIV where app_user='ADMIN' and key='PROJECT'\")\n# dicamba_project_df<-dbGetQuery(con,query_DICAMBA_PROJECT)\n# setnames(dicamba_project_df,names(dicamba_project_df),toupper(names(dicamba_project_df)))\n\nstabilityResearcher_df <- stabilityUserPriv_df %>% dplyr::filter(app_user=='ADMIN' & key == 'RESEARCHER')\n\n\n## modified from Winston Chang\n## https://groups.google.com/forum/#!topic/shiny-discuss/2jlYOYFp2-A\n## Given a column: if numeric, convert to formatted string; otherwise, return unchanged\n# format_num <- function(col) {\n#   if (is.numeric(col))\n#     sprintf(\"%1.3f\", col)\n#   else\n#     col\n# }\n\n## modified\n# format_number <- function(col,n) {\n#   fmt=paste0('\"','%.',n,'f\"')\n#   if (is.numeric(col))\n#     sprintf(fmt, col)\n#   else\n#     col\n# }\n\n\n\n",
    "created" : 1479782542563.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3973951021",
    "id" : "CE529DFD",
    "lastKnownWriteTime" : 1479335906,
    "last_content_update" : 1479335906,
    "path" : "~/Desktop/ChemDicambaStability-master/global.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}